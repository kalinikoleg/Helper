
Все работает в блокирующей манере

  
1. АsParallel() - 
Указывает, что остаток запроса должен быть выполнен парал¬
лельно, если это возможно

	int[] data = new int[10000000];
	// Инициализировать массив данных положительными значениями.
	for(int i=0; i < data.Length; i++) data[i] = i;
	// А теперь ввести в массив данных ряд отрицательных значений.
	data[1000] = -1;
	data[14000] = -2;
	data[15000] = -3;
	data[676000] = -4;
	Глава 24. Многопоточное программирование. Часть вторая: библиотека TPL 919
	data[8024540] = -5;
	data[9908000] = -6;
	// Использовать запрос PLINQ для поиска отрицательных значений.
	var negatives = from val in data.AsParallel()
	where val < 0
	select val;
	foreach(var v in negatives)
	Console.Write(v + " ");

Благодаря  этому  разрешается  параллельное  выполне­
ние  операций  над  массивом  data,  а  именно:  поиск  отрицательных  значений  парал­
лельно  в  нескольких  потоках.  По  мере  обнаружения  отрицательных  значений  они  до­
бавляются в последовательность вывода. Эго означает, что порядок формирования по­
следовательности  вывода  может  и  не  отражать  порядок  расположения  отрицательных 
значений  в  массиве  data. 

2. AsOrdered() 
сли  же  результат  должен  отражать  порядок  организации  источника 
данных, то его нужно запросить специально с помощью метода  AsOrdered()

// Использовать метод AsOrdered() для сохранения порядка
// в результирующей последовательности.
var negatives = from val in data.AsParallel().AsOrdered()
where val < 0
select val;

WithDegreeOfParallelism() -
Указывает максимальное количество процессоров, которое
PLINQ должен использовать для распараллеливания запроса
 
WithCancellation() - 
Указывает, что PLINQ должен периодически следить за состо¬
янием предоставленного признака отмены и, если понадобит¬
ся, отменять выполнение

static void Main() {
CancellationTokenSource cancelTokSrc = new CancellationTokenSource();
int[] data = new int[10000000];
// Инициализировать массив данных положительными значениями.
for(int i=0; i < data.Length; i++) data[i] = i;
// А теперь ввести в массив данных ряд отрицательных значений.
data[1000] = -1;
data[14000] = -2;
data[15000] = -3;
data[676000] = -4;
data[8024540] = -5;
data[9908000] = -6;
// Использовать запрос PLINQ для поиска отрицательных значений.
var negatives = from val in data.AsParallel().
WithCancellation(cancelTokSrc.Token)
where val < 0
select val;
// Создать задачу для отмены запроса по истечении 100 миллисекунд.
Task cancelTsk = Task.Factory.StartNew( () => {
Thread.Sleep(100);
cancelTokSrc.Cancel();
});
try {
foreach(var v in negatives)
Console.Write(v + " ");
} catch(OperationCanceledException exc) {
Console.WriteLine(exc.Message);
} catch(AggregateException exc) {
Console.WriteLine(exc);
} finally {
cancelTsk.Wait();
cancelTokSrc.Dispose();
cancelTsk.Dispose();
}


//////////////////asParallel
private static void ProcessInData()
{
	MessageBox.Show("выполнение задачи в потоке ID: " + Thread.CurrentThread.ManagedThreadId);
	//получить очень большой массив целых чисел
	int[] source = Enumerable.Range(1, 100000000).ToArray();

	var watch = new Stopwatch();
	watch.Start();
	int[] modThreeIsZero = (from num in source
							where num % 3 == 0
							orderby num descending
							select num).ToArray();

	watch.Stop();
	MessageBox.Show(string.Format("Found {0} numbers that match query!" + Environment.NewLine +
	"Passed time: {1}", modThreeIsZero.Count(), watch.Elapsed.TotalSeconds));
}

private static void ProcessInDataPLINQ()
{
	GC.Collect(0);

	MessageBox.Show("выполнение PLINQ задачи в потоке ID: " + Thread.CurrentThread.ManagedThreadId);
	//получить очень большой массив целых чисел
	int[] source = Enumerable.Range(1, 100000000).ToArray();

	var watch = new Stopwatch();
	watch.Start();
	int[] modThreeIsZero = (from num in source.AsParallel()
							where num % 3 == 0
							orderby num descending
							select num).ToArray();

	watch.Stop();
	MessageBox.Show(string.Format("Found {0} numbers that match query!" + Environment.NewLine +
	"Passed time: {1}", modThreeIsZero.Count(), watch.Elapsed.TotalSeconds));
}

private static void Click()
{
	ProcessInData(); // 10 секунд выполняется
	ProcessInDataPLINQ(); // 5 секунд выполняется
}



/////////////////with cancel
internal class Program
    {
        private static CancellationTokenSource cancleToken = new CancellationTokenSource();

        private void BtnCancel()
        {
            cancleToken.Cancel();
        }
        private static void ProcessInDataPLINQ()
        {
            //получить очень большой массив целых чисел
            int[] source = Enumerable.Range(1, 100000000).ToArray();

            try
            {
                int[] modThreeIsZero = (from num in source.AsParallel().WithCancellation(cancleToken.Token)
                    where num%3 == 0
                    orderby num descending
                    select num).ToArray();

            }
            catch (OperationCanceledException ex)
            {
                MessageBox.Show("User canceled");
            }
          
        }

        private static void Click()
        {
            ProcessInDataPLINQ(); // 5 секунд выполняется
        }


  ////////////////////ForAll
///////Принимает Action delegate


	    private static void ProcessInDataPLINQ()
        {
            //получить очень большой массив целых чисел
            int[] source = Enumerable.Range(1, 100).ToArray();
			List<int> neList = new List<int>();
            source.AsParallel().ForAll((s) =>
            {
                Console.WriteLine("{0}, Thread Id= {1}", s, Thread.CurrentThread.ManagedThreadId);
                Thread.Sleep(30);
				 neList.Add(s);
            });
                 var c = neList.Count;         
		}

        private static void Click()
        {
            ProcessInDataPLINQ(); // 5 секунд выполняется
        }
