//ВАЖНО!!!!!
//когда проиходит работа с пулом, то данные пересекаются между потоками
//Почему потоко безопасен? если разные потоки(даже в одном потоке) обращаются в словарь пула, и какой-то объект заблокирован другим потоком
//пул создаст новый объект, а если объект не заблокирован ни одним из потоков, пул вернет этот объект. В однопоточном приложение,
//в котором нуден тот же объект, работает в разы быстрее


//Основная задача паттерна - ускорить производительность объектов, которые "дорого" создавать или уничтожать.




//Пул объектов предназначен хранения готовых к использованию объектов. Когда системе требуется новый объект, 
//он запрашивается из Пула, минуя процесс порождения. А после использования возвращается обратно в Пул вместо
//уничтожения.

//Шаблон применяется для повышения производительности, если:
//-объекты часто создаются и уничтожаются;
//-в системе существует ограниченное количество объектов типа, хранимого в Пуле;
//-создание и/или уничтожение объекта являются очень затратными операциями.

//Пул объектов может работать как с интерфейсами, так и с конкретными реализациями. Все зависит от архитектуры 
//разрабатываемой системы и решаемых задач.

//Можно встретить совместное использование Пула объектов и других порождающих шаблоном. Например, для создания 
//объектов в определенном состоянии может применить Прототип. А при помощи Одиночки – создать единственный
//экземпляр Пула в системе.

//Плохой практикой является сокрытие Пула за другими порождающими шаблонами. Разработчик, использующий 
//такой "гибрид", не ожидает требования возврата объектов от, например, Фабричного метода. А без возврата 
//объектов сам Пул становится бесполезным. В таком случае, правильным решением будет отделить реализацию
//классов, создающих объекты.

//Особенности использования
//1. Пул ничего не знает о реализации хранимых объектов. Поэтому возвращенный объект считается находящимся в неопределенном состоянии. Для дальнейшего использования его необходимо перевести в начальное состояние (сбросить). Наличие объектов в неопределенном состоянии превращает Пул в "объектную клоаку" (object cesspool).
//2. Повторное использование может стать причиной утечки конфиденциальной информации. Поэтому необходимо обязательно очищать поля с секретными данными при сбросе, а сами данные – затирать или уничтожать.
//3. Возможна ситуация, когда в Пуле не останется свободных объектов. В этом случае реакция на запрос может быть следующая:
//    увеличение размера пула;
//    отказ в выдачи объекта;
//    постановка в очередь и ожидание освобождения объекта.