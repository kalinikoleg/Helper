

	Первой  возможностью  расширения  действий  является  использование  ActionFilter.  Данная 
возможность  расширения  позволяет  прерывать  выполнение  действия  и  дополнять  поведение  до  или 
после  того,  как  выполнится  действие.  Это  похоже  на  аспектно-ориентированное  программирование, 
которое  является  способом  применения  в  коде  сквозной  функциональности,  что  исключает 
необходимость  хранения  большого  количества  продублированного  кода.

	Одно из решений -  создать базовый контроллер и применить фильтр к нему. Тогда все контроллеры, в 
которых необходимы эти фильтры, можно просто наследовать от этого базового типа. 

	Когда  мы  используем  наследование  для  решения  этой  проблемы,  появляется  новая  –  наследование 
связывает  наш  контроллер  с  базовым  типом.  Наследование  представляет  собой  скомпилированное 
состояние,  которое  затрудняет  изменения  во  время  исполнения.  И  даже  изменения  во  время 
компиляции  затруднены:  если  базовый  тип  изменен,  все  производные  должны  измениться.  В  таких 
случаях, мы предпочитаем композицию наследованию.

	Расширяя  стандартный  ControllerActionInvoker,  мы  можем  составить  фильтры  действий  во 
время  исполнения,  не  используя  атрибуты  в  действиях,  контроллерах  или  базовом  контроллере.  В 
следующем листинге мы расширяем  ControllerActionInvoker  так, чтобы позволить применять 
фильтры действий без атрибутов. 



Использование результатов действий
Пользовательские результаты действий могут использоваться для удаления кода, продублированного в 
рамках  методов,  и  для  извлечения  зависимостей,  которые  могут  усложнить  тестирование  действия. 
Хороший  способ  применения  пользовательского  результата  действия  –  формирование 
функциональности,  за  исключением  готовых  к  применению  (так  называемой  "out-of-the-box") 
ActionResult таких, как ViewResult или RedirectResult, JsonResult.