//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infrastructure.Data.DbContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PhoneIdEntities : DbContext
    {
        public PhoneIdEntities()
            : base("name=PhoneIdEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int AccountExists(string login, Nullable<bool> isActive, ObjectParameter accExists)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountExists", loginParameter, isActiveParameter, accExists);
        }
    
        public virtual int AddAccount(string login, string firstName, string lastName, string email, string password, string salt, Nullable<int> wipeCount, Nullable<bool> isActive, ObjectParameter accountId)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            var wipeCountParameter = wipeCount.HasValue ?
                new ObjectParameter("WipeCount", wipeCount) :
                new ObjectParameter("WipeCount", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAccount", loginParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, saltParameter, wipeCountParameter, isActiveParameter, accountId);
        }
    
        public virtual int AddDevice(string barcode, string manufacturer, string modelName, string imei, string meid, string serialNumber, Nullable<bool> simPresent, Nullable<bool> sdCardPresent, string additionalInfo, ObjectParameter deviceId)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var imeiParameter = imei != null ?
                new ObjectParameter("Imei", imei) :
                new ObjectParameter("Imei", typeof(string));
    
            var meidParameter = meid != null ?
                new ObjectParameter("Meid", meid) :
                new ObjectParameter("Meid", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var simPresentParameter = simPresent.HasValue ?
                new ObjectParameter("SimPresent", simPresent) :
                new ObjectParameter("SimPresent", typeof(bool));
    
            var sdCardPresentParameter = sdCardPresent.HasValue ?
                new ObjectParameter("SdCardPresent", sdCardPresent) :
                new ObjectParameter("SdCardPresent", typeof(bool));
    
            var additionalInfoParameter = additionalInfo != null ?
                new ObjectParameter("AdditionalInfo", additionalInfo) :
                new ObjectParameter("AdditionalInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDevice", barcodeParameter, manufacturerParameter, modelNameParameter, imeiParameter, meidParameter, serialNumberParameter, simPresentParameter, sdCardPresentParameter, additionalInfoParameter, deviceId);
        }
    
        public virtual int AddDevicePurchase(Nullable<short> purchaseStatus, Nullable<System.DateTime> date, string pcIdentifier, Nullable<long> customerDetailsId, Nullable<bool> isActive, string barcode, Nullable<long> technicianId, string manufacturer, string modelName, string imei, string meid, string serialNumber, Nullable<bool> simPresent, Nullable<bool> sdCardPresent, string additionalInfo, ObjectParameter historyEntryId)
        {
            var purchaseStatusParameter = purchaseStatus.HasValue ?
                new ObjectParameter("PurchaseStatus", purchaseStatus) :
                new ObjectParameter("PurchaseStatus", typeof(short));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var pcIdentifierParameter = pcIdentifier != null ?
                new ObjectParameter("PcIdentifier", pcIdentifier) :
                new ObjectParameter("PcIdentifier", typeof(string));
    
            var customerDetailsIdParameter = customerDetailsId.HasValue ?
                new ObjectParameter("CustomerDetailsId", customerDetailsId) :
                new ObjectParameter("CustomerDetailsId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var technicianIdParameter = technicianId.HasValue ?
                new ObjectParameter("TechnicianId", technicianId) :
                new ObjectParameter("TechnicianId", typeof(long));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var imeiParameter = imei != null ?
                new ObjectParameter("Imei", imei) :
                new ObjectParameter("Imei", typeof(string));
    
            var meidParameter = meid != null ?
                new ObjectParameter("Meid", meid) :
                new ObjectParameter("Meid", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var simPresentParameter = simPresent.HasValue ?
                new ObjectParameter("SimPresent", simPresent) :
                new ObjectParameter("SimPresent", typeof(bool));
    
            var sdCardPresentParameter = sdCardPresent.HasValue ?
                new ObjectParameter("SdCardPresent", sdCardPresent) :
                new ObjectParameter("SdCardPresent", typeof(bool));
    
            var additionalInfoParameter = additionalInfo != null ?
                new ObjectParameter("AdditionalInfo", additionalInfo) :
                new ObjectParameter("AdditionalInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDevicePurchase", purchaseStatusParameter, dateParameter, pcIdentifierParameter, customerDetailsIdParameter, isActiveParameter, barcodeParameter, technicianIdParameter, manufacturerParameter, modelNameParameter, imeiParameter, meidParameter, serialNumberParameter, simPresentParameter, sdCardPresentParameter, additionalInfoParameter, historyEntryId);
        }
    
        public virtual int AddNewHardware(Nullable<long> accountId, Nullable<long> performerAccId, string pcIdentifier, ObjectParameter hardwareId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var performerAccIdParameter = performerAccId.HasValue ?
                new ObjectParameter("PerformerAccId", performerAccId) :
                new ObjectParameter("PerformerAccId", typeof(long));
    
            var pcIdentifierParameter = pcIdentifier != null ?
                new ObjectParameter("PcIdentifier", pcIdentifier) :
                new ObjectParameter("PcIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewHardware", accountIdParameter, performerAccIdParameter, pcIdentifierParameter, hardwareId);
        }
    
        public virtual int AddNewPrice(Nullable<long> priceHistoryId, Nullable<decimal> newPrice, Nullable<System.DateTime> startDate)
        {
            var priceHistoryIdParameter = priceHistoryId.HasValue ?
                new ObjectParameter("PriceHistoryId", priceHistoryId) :
                new ObjectParameter("PriceHistoryId", typeof(long));
    
            var newPriceParameter = newPrice.HasValue ?
                new ObjectParameter("NewPrice", newPrice) :
                new ObjectParameter("NewPrice", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewPrice", priceHistoryIdParameter, newPriceParameter, startDateParameter);
        }
    
        public virtual int AddNewSoftwareVersion(string filename, string version, Nullable<System.DateTime> releaseDate, ObjectParameter id)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("Filename", filename) :
                new ObjectParameter("Filename", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var releaseDateParameter = releaseDate.HasValue ?
                new ObjectParameter("ReleaseDate", releaseDate) :
                new ObjectParameter("ReleaseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewSoftwareVersion", filenameParameter, versionParameter, releaseDateParameter, id);
        }
    
        public virtual int AddOrder(Nullable<long> accountId, Nullable<short> paymentMethod, string transactionId, Nullable<System.DateTime> date, ObjectParameter orderId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var paymentMethodParameter = paymentMethod.HasValue ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(short));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrder", accountIdParameter, paymentMethodParameter, transactionIdParameter, dateParameter, orderId);
        }
    
        public virtual int AddOrderItem(Nullable<long> orderId, Nullable<long> priceListId, Nullable<int> quantity, string additionalInfo, ObjectParameter orderItemId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(long));
    
            var priceListIdParameter = priceListId.HasValue ?
                new ObjectParameter("PriceListId", priceListId) :
                new ObjectParameter("PriceListId", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var additionalInfoParameter = additionalInfo != null ?
                new ObjectParameter("AdditionalInfo", additionalInfo) :
                new ObjectParameter("AdditionalInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrderItem", orderIdParameter, priceListIdParameter, quantityParameter, additionalInfoParameter, orderItemId);
        }
    
        public virtual int AddPerson(Nullable<long> accountId, string firstName, string lastName, string company, string address, string city, string state, string zip, string phone, string country, string email, Nullable<short> type, Nullable<bool> isActive, ObjectParameter personId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(short));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPerson", accountIdParameter, firstNameParameter, lastNameParameter, companyParameter, addressParameter, cityParameter, stateParameter, zipParameter, phoneParameter, countryParameter, emailParameter, typeParameter, isActiveParameter, personId);
        }
    
        public virtual int AddRoleToAccount(Nullable<long> accountId, Nullable<long> roleId, ObjectParameter id)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRoleToAccount", accountIdParameter, roleIdParameter, id);
        }
    
        public virtual int AddToken(Nullable<long> accountId, Nullable<short> type, string pcIdentifier, Nullable<System.DateTime> expirationDate, ObjectParameter token)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(short));
    
            var pcIdentifierParameter = pcIdentifier != null ?
                new ObjectParameter("PcIdentifier", pcIdentifier) :
                new ObjectParameter("PcIdentifier", typeof(string));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddToken", accountIdParameter, typeParameter, pcIdentifierParameter, expirationDateParameter, token);
        }
    
        public virtual int AddWipe(Nullable<long> technicianId, Nullable<short> wipeStatus, Nullable<System.DateTime> date, string wipeCode, Nullable<bool> isJailbroken, Nullable<bool> isActive, string logData, string barcode, string manufacturer, string modelName, string imei, string meid, string serialNumber, Nullable<bool> simPresent, Nullable<bool> sdCardPresent, string additionalInfo, ObjectParameter historyEntryId)
        {
            var technicianIdParameter = technicianId.HasValue ?
                new ObjectParameter("TechnicianId", technicianId) :
                new ObjectParameter("TechnicianId", typeof(long));
    
            var wipeStatusParameter = wipeStatus.HasValue ?
                new ObjectParameter("WipeStatus", wipeStatus) :
                new ObjectParameter("WipeStatus", typeof(short));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var wipeCodeParameter = wipeCode != null ?
                new ObjectParameter("WipeCode", wipeCode) :
                new ObjectParameter("WipeCode", typeof(string));
    
            var isJailbrokenParameter = isJailbroken.HasValue ?
                new ObjectParameter("IsJailbroken", isJailbroken) :
                new ObjectParameter("IsJailbroken", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var logDataParameter = logData != null ?
                new ObjectParameter("LogData", logData) :
                new ObjectParameter("LogData", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var imeiParameter = imei != null ?
                new ObjectParameter("Imei", imei) :
                new ObjectParameter("Imei", typeof(string));
    
            var meidParameter = meid != null ?
                new ObjectParameter("Meid", meid) :
                new ObjectParameter("Meid", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var simPresentParameter = simPresent.HasValue ?
                new ObjectParameter("SimPresent", simPresent) :
                new ObjectParameter("SimPresent", typeof(bool));
    
            var sdCardPresentParameter = sdCardPresent.HasValue ?
                new ObjectParameter("SdCardPresent", sdCardPresent) :
                new ObjectParameter("SdCardPresent", typeof(bool));
    
            var additionalInfoParameter = additionalInfo != null ?
                new ObjectParameter("AdditionalInfo", additionalInfo) :
                new ObjectParameter("AdditionalInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWipe", technicianIdParameter, wipeStatusParameter, dateParameter, wipeCodeParameter, isJailbrokenParameter, isActiveParameter, logDataParameter, barcodeParameter, manufacturerParameter, modelNameParameter, imeiParameter, meidParameter, serialNumberParameter, simPresentParameter, sdCardPresentParameter, additionalInfoParameter, historyEntryId);
        }
    
        public virtual int AddWipes(Nullable<long> accountId, Nullable<int> wipesCount)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var wipesCountParameter = wipesCount.HasValue ?
                new ObjectParameter("WipesCount", wipesCount) :
                new ObjectParameter("WipesCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWipes", accountIdParameter, wipesCountParameter);
        }
    
        public virtual int ChargeWipe(Nullable<long> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChargeWipe", accountIdParameter);
        }
    
        public virtual int DisablePurchaseHistory(Nullable<long> accountId, Nullable<long> devicePurchaseId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var devicePurchaseIdParameter = devicePurchaseId.HasValue ?
                new ObjectParameter("DevicePurchaseId", devicePurchaseId) :
                new ObjectParameter("DevicePurchaseId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DisablePurchaseHistory", accountIdParameter, devicePurchaseIdParameter);
        }
    
        public virtual int DisableWipeHistoryEntry(Nullable<long> id, Nullable<long> technicianId, Nullable<long> accountId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var technicianIdParameter = technicianId.HasValue ?
                new ObjectParameter("TechnicianId", technicianId) :
                new ObjectParameter("TechnicianId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DisableWipeHistoryEntry", idParameter, technicianIdParameter, accountIdParameter);
        }
    
        public virtual int GenerateToken(ObjectParameter token)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateToken", token);
        }
    
        public virtual ObjectResult<GetAccount_Result> GetAccount(string login, string password, Nullable<bool> isActive)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccount_Result>("GetAccount", loginParameter, passwordParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAccountInfo_Result> GetAccountInfo(Nullable<long> accountId, string login, string email, Nullable<bool> isActive)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountInfo_Result>("GetAccountInfo", accountIdParameter, loginParameter, emailParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAccountRoles_Result> GetAccountRoles(Nullable<long> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountRoles_Result>("GetAccountRoles", accountIdParameter);
        }
    
        public virtual ObjectResult<GetCurrentSoftwareVersion_Result> GetCurrentSoftwareVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrentSoftwareVersion_Result>("GetCurrentSoftwareVersion");
        }
    
        public virtual int GetDeviceIdByBarcode(string barcode, ObjectParameter id)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDeviceIdByBarcode", barcodeParameter, id);
        }
    
        public virtual ObjectResult<GetDeviceInfoByPurchaseId_Result> GetDeviceInfoByPurchaseId(Nullable<long> devicePurchaseHistoryId, Nullable<long> accountId)
        {
            var devicePurchaseHistoryIdParameter = devicePurchaseHistoryId.HasValue ?
                new ObjectParameter("DevicePurchaseHistoryId", devicePurchaseHistoryId) :
                new ObjectParameter("DevicePurchaseHistoryId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviceInfoByPurchaseId_Result>("GetDeviceInfoByPurchaseId", devicePurchaseHistoryIdParameter, accountIdParameter);
        }
    
        public virtual ObjectResult<GetDeviceStatistic_Result> GetDeviceStatistic(Nullable<long> accountId, Nullable<int> purchaseStatus, Nullable<long> technicianId, string serialNumber, string meid, string emei, string deviceModel, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> recordsPerPage, ObjectParameter page, ObjectParameter totalRecords, ObjectParameter totalPages)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var purchaseStatusParameter = purchaseStatus.HasValue ?
                new ObjectParameter("PurchaseStatus", purchaseStatus) :
                new ObjectParameter("PurchaseStatus", typeof(int));
    
            var technicianIdParameter = technicianId.HasValue ?
                new ObjectParameter("TechnicianId", technicianId) :
                new ObjectParameter("TechnicianId", typeof(long));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var meidParameter = meid != null ?
                new ObjectParameter("Meid", meid) :
                new ObjectParameter("Meid", typeof(string));
    
            var emeiParameter = emei != null ?
                new ObjectParameter("Emei", emei) :
                new ObjectParameter("Emei", typeof(string));
    
            var deviceModelParameter = deviceModel != null ?
                new ObjectParameter("DeviceModel", deviceModel) :
                new ObjectParameter("DeviceModel", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviceStatistic_Result>("GetDeviceStatistic", accountIdParameter, purchaseStatusParameter, technicianIdParameter, serialNumberParameter, meidParameter, emeiParameter, deviceModelParameter, dateFromParameter, dateToParameter, recordsPerPageParameter, page, totalRecords, totalPages);
        }
    
        public virtual ObjectResult<GetLicenseListPaged_Result> GetLicenseListPaged(Nullable<long> accountId, Nullable<int> recordsPerPage, ObjectParameter page, ObjectParameter totalRecords, ObjectParameter totalPages)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLicenseListPaged_Result>("GetLicenseListPaged", accountIdParameter, recordsPerPageParameter, page, totalRecords, totalPages);
        }
    
        public virtual ObjectResult<GetOrderSummary_Result> GetOrderSummary(Nullable<long> orderId, Nullable<long> orderItemId, Nullable<short> paymentMethod, string transactionId, Nullable<short> priceType, Nullable<long> priceId, Nullable<long> priceHistoryId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(long));
    
            var orderItemIdParameter = orderItemId.HasValue ?
                new ObjectParameter("OrderItemId", orderItemId) :
                new ObjectParameter("OrderItemId", typeof(long));
    
            var paymentMethodParameter = paymentMethod.HasValue ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(short));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var priceTypeParameter = priceType.HasValue ?
                new ObjectParameter("PriceType", priceType) :
                new ObjectParameter("PriceType", typeof(short));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(long));
    
            var priceHistoryIdParameter = priceHistoryId.HasValue ?
                new ObjectParameter("PriceHistoryId", priceHistoryId) :
                new ObjectParameter("PriceHistoryId", typeof(long));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderSummary_Result>("GetOrderSummary", orderIdParameter, orderItemIdParameter, paymentMethodParameter, transactionIdParameter, priceTypeParameter, priceIdParameter, priceHistoryIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<GetPersonById_Result> GetPersonById(Nullable<long> personId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonById_Result>("GetPersonById", personIdParameter);
        }
    
        public virtual ObjectResult<GetPersonListPaged_Result> GetPersonListPaged(Nullable<long> accountId, Nullable<short> type, Nullable<bool> isActive, Nullable<int> recordsPerPage, ObjectParameter pageNum, ObjectParameter totalPages, ObjectParameter totalRecords)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(short));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonListPaged_Result>("GetPersonListPaged", accountIdParameter, typeParameter, isActiveParameter, recordsPerPageParameter, pageNum, totalPages, totalRecords);
        }
    
        public virtual int GetPhoneIdStatus(Nullable<long> accountId, string hwid, ObjectParameter wipeCount, ObjectParameter deviceInfoAvailable)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var hwidParameter = hwid != null ?
                new ObjectParameter("Hwid", hwid) :
                new ObjectParameter("Hwid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPhoneIdStatus", accountIdParameter, hwidParameter, wipeCount, deviceInfoAvailable);
        }
    
        public virtual ObjectResult<GetPriceList_Result> GetPriceList(Nullable<long> priceListId, Nullable<short> priceItemType)
        {
            var priceListIdParameter = priceListId.HasValue ?
                new ObjectParameter("PriceListId", priceListId) :
                new ObjectParameter("PriceListId", typeof(long));
    
            var priceItemTypeParameter = priceItemType.HasValue ?
                new ObjectParameter("PriceItemType", priceItemType) :
                new ObjectParameter("PriceItemType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPriceList_Result>("GetPriceList", priceListIdParameter, priceItemTypeParameter);
        }
    
        public virtual ObjectResult<GetTechniciansPaged_Result> GetTechniciansPaged(Nullable<long> accountId, string firstName, string lastName, string email, Nullable<long> technicianId, Nullable<int> recordsPerPage, Nullable<bool> isActive, ObjectParameter pageNum, ObjectParameter totalPages, ObjectParameter totalRecords)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var technicianIdParameter = technicianId.HasValue ?
                new ObjectParameter("TechnicianId", technicianId) :
                new ObjectParameter("TechnicianId", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTechniciansPaged_Result>("GetTechniciansPaged", accountIdParameter, firstNameParameter, lastNameParameter, emailParameter, technicianIdParameter, recordsPerPageParameter, isActiveParameter, pageNum, totalPages, totalRecords);
        }
    
        public virtual ObjectResult<GetToken_Result> GetToken(string token, Nullable<short> type)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetToken_Result>("GetToken", tokenParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetUserStatisticsPaged_Result> GetUserStatisticsPaged(string login, string email, string firstName, string lastName, Nullable<int> recordsPerPage, ObjectParameter page, ObjectParameter totalRecords, ObjectParameter totalPages)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserStatisticsPaged_Result>("GetUserStatisticsPaged", loginParameter, emailParameter, firstNameParameter, lastNameParameter, recordsPerPageParameter, page, totalRecords, totalPages);
        }
    
        public virtual ObjectResult<GetWipeHistoryPaged_Result> GetWipeHistoryPaged(Nullable<long> accountId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string wipeCode, string barcode, string modelName, string imei, string meid, string serialNumber, Nullable<short> wipeStatus, Nullable<long> technicianId, Nullable<int> recordsPerPage, Nullable<bool> isActive, ObjectParameter pageNum, ObjectParameter totalPages, ObjectParameter totalRecords)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var wipeCodeParameter = wipeCode != null ?
                new ObjectParameter("WipeCode", wipeCode) :
                new ObjectParameter("WipeCode", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var imeiParameter = imei != null ?
                new ObjectParameter("Imei", imei) :
                new ObjectParameter("Imei", typeof(string));
    
            var meidParameter = meid != null ?
                new ObjectParameter("Meid", meid) :
                new ObjectParameter("Meid", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var wipeStatusParameter = wipeStatus.HasValue ?
                new ObjectParameter("WipeStatus", wipeStatus) :
                new ObjectParameter("WipeStatus", typeof(short));
    
            var technicianIdParameter = technicianId.HasValue ?
                new ObjectParameter("TechnicianId", technicianId) :
                new ObjectParameter("TechnicianId", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWipeHistoryPaged_Result>("GetWipeHistoryPaged", accountIdParameter, dateFromParameter, dateToParameter, wipeCodeParameter, barcodeParameter, modelNameParameter, imeiParameter, meidParameter, serialNumberParameter, wipeStatusParameter, technicianIdParameter, recordsPerPageParameter, isActiveParameter, pageNum, totalPages, totalRecords);
        }
    
        public virtual ObjectResult<GetWipesInfo_Result> GetWipesInfo(Nullable<long> accountId, Nullable<bool> isActive)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWipesInfo_Result>("GetWipesInfo", accountIdParameter, isActiveParameter);
        }
    
        public virtual int RemoveTokens(Nullable<long> accountId, Nullable<short> tokenType, string pcIdentifier, string token, Nullable<System.DateTime> expirationDate)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var tokenTypeParameter = tokenType.HasValue ?
                new ObjectParameter("TokenType", tokenType) :
                new ObjectParameter("TokenType", typeof(short));
    
            var pcIdentifierParameter = pcIdentifier != null ?
                new ObjectParameter("PcIdentifier", pcIdentifier) :
                new ObjectParameter("PcIdentifier", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveTokens", accountIdParameter, tokenTypeParameter, pcIdentifierParameter, tokenParameter, expirationDateParameter);
        }
    
        public virtual int UpdateAccount(Nullable<long> id, string login, string firstName, string lastName, string email, Nullable<int> wipeCount, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var wipeCountParameter = wipeCount.HasValue ?
                new ObjectParameter("WipeCount", wipeCount) :
                new ObjectParameter("WipeCount", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAccount", idParameter, loginParameter, firstNameParameter, lastNameParameter, emailParameter, wipeCountParameter, isActiveParameter);
        }
    
        public virtual int UpdateHardware(Nullable<long> hardwareId, Nullable<long> performerAccId, string pcIdentifier)
        {
            var hardwareIdParameter = hardwareId.HasValue ?
                new ObjectParameter("HardwareId", hardwareId) :
                new ObjectParameter("HardwareId", typeof(long));
    
            var performerAccIdParameter = performerAccId.HasValue ?
                new ObjectParameter("PerformerAccId", performerAccId) :
                new ObjectParameter("PerformerAccId", typeof(long));
    
            var pcIdentifierParameter = pcIdentifier != null ?
                new ObjectParameter("PcIdentifier", pcIdentifier) :
                new ObjectParameter("PcIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHardware", hardwareIdParameter, performerAccIdParameter, pcIdentifierParameter);
        }
    
        public virtual int UpdateOrder(Nullable<long> id, string transactionId, Nullable<System.DateTime> date)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrder", idParameter, transactionIdParameter, dateParameter);
        }
    
        public virtual int UpdatePassword(Nullable<long> id, string password, string salt)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassword", idParameter, passwordParameter, saltParameter);
        }
    
        public virtual int UpdatePrice(Nullable<long> id, Nullable<long> priceId, Nullable<decimal> price)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(long));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePrice", idParameter, priceIdParameter, priceParameter);
        }
    
        public virtual int UpdateTechnician(Nullable<long> id, string firstName, string lastname, string company, string address, string city, string state, string zip, string phone, string country, string email, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTechnician", idParameter, firstNameParameter, lastnameParameter, companyParameter, addressParameter, cityParameter, stateParameter, zipParameter, phoneParameter, countryParameter, emailParameter, isActiveParameter);
        }
    }
}
