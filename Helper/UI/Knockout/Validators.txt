include ("~/JS/knockout.validation.js")

Custom Rules

Custom Rules can be created using the simple example below. All you need is to define a validator function and a default message.
The validator function takes in the observable's value, and the params that you pass in with the extend method.

ko.validation.rules['mustEqual'] = {
    validator: function (val, otherVal) {
        return val === otherVal;
    },
    message: 'The field must equal {0}'
};


!YOU NEED TO CALL:
ko.validation.registerExtenders();

//the value '5' is the second arg ('otherVal') that is passed to the validator
var myCustomObj = ko.observable().extend({ mustEqual: 5 });

All Validation Messages can be formatted to use the passed in params to produce a custom message. message: 'The field must equal 
{0}' will be formatted with the 5 during actual validation so the user sees: 'The field must equal 5'

'Anonymous' or Single-Use Custom Rules

Anonymous rules are validation rules that are usually specific to only one object and might be determined on the fly.

var testObj = ko.observable(3).extend({
        validation: {
            validator: function (val, someOtherVal) {
                return val === someOtherVal;
            },
            message: 'Must Equal 5',
            params: 5
        }
    });
	
You can supply a validator or an array of them.

var testObj = ko.observable(3).extend({
        validation: [{
            validator: function (val, someOtherVal) {
                return val === someOtherVal;
            },
            message: 'Must Equal 5',
            params: 5
        },{
            validator: function (val) {
                return val !== 8;
            },
            message: 'Can not be 8',
        }]
    });
	
!Example:

self.codeCount = ko.observable(1)
	.extend({
		validation: {
			validator:
				function (value, self) { //self показует observable совйстава, если убрать, будет self всей модели показывать 
					switch (self.selectedCodeGenType()) {
						case self.generateAutomatically:
							var number = value;
							if (!$.isNumeric(number) || number < 1 || number > 999 || number == '') {
								return false;
							}
							else {
								return true;
							}
					}
					return false;
				},
			message: "Set the value from 1 to 999.",
			params: self
		}
	});

<div class="form-inline" data-bind="visible: isGenerateAutomaticallyVisible, validationOptions: { insertMessages: false}">
	<label>Number of codes to be generated:</label>
	<asp:TextBox runat="server" name="codeCount" ID="codeCount" type="text" data-bind="value: codeCount,  valueUpdate: 'afterkeydown'" class="input-small"></asp:TextBox>
	<span class="alert alert-error inline_alert" data-bind="validationMessage: codeCount"></span>
</div>
